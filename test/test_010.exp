Tokens:
test/test_010.in:1:1:	print	"print"	0	(1, 1) -> (1, 6)
test/test_010.in:1:6:	lparen	"("	0	(1, 6) -> (1, 7)
test/test_010.in:1:7:	number	"12"	12	(1, 7) -> (1, 9)
test/test_010.in:1:9:	comma	","	0	(1, 9) -> (1, 10)
test/test_010.in:1:10:	number	"34"	34	(1, 10) -> (1, 12)
test/test_010.in:1:12:	rparen	")"	0	(1, 12) -> (1, 13)
test/test_010.in:2:0:	eof	""	0	(2, 0) -> (2, 0)
AST:
(module
  (print
    (number [i64] 12)
    (number [i64] 34)
  )
)
IR:
target triple = "x86_64-pc-linux-gnu"

@0 = global [4 x i8] c"%d\0A\00"

declare i32 @puts(i8* %str)

declare i32 @rand()

declare i32 @sprintf(i8* %buf, i8* %format, ...)

declare i32 @printf(i8* %format, ...)

define i32 @main() {
entry:
	%0 = getelementptr [4 x i8], [4 x i8]* @0, i32 0, i32 0
	%1 = call i32 (i8*, ...) @printf(i8* %0, i32 12)
	%2 = getelementptr [4 x i8], [4 x i8]* @0, i32 0, i32 0
	%3 = call i32 (i8*, ...) @printf(i8* %2, i32 34)
	ret i32 0
}

Run:
12
34
