Tokens:
test/test_002.in:1:1:	print	"print"	0	(1, 1) -> (1, 6)
test/test_002.in:1:6:	lparen	"("	0	(1, 6) -> (1, 7)
test/test_002.in:1:7:	number	"34"	34	(1, 7) -> (1, 9)
test/test_002.in:1:9:	add	"+"	0	(1, 9) -> (1, 10)
test/test_002.in:1:10:	number	"35"	35	(1, 10) -> (1, 12)
test/test_002.in:1:12:	add	"+"	0	(1, 12) -> (1, 13)
test/test_002.in:1:13:	number	"42000"	42000	(1, 13) -> (1, 18)
test/test_002.in:1:18:	rparen	")"	0	(1, 18) -> (1, 19)
test/test_002.in:2:0:	eof	""	0	(2, 0) -> (2, 0)
AST:
(module
  (print
    (add
      (add
        (number 34)
        (number 35)
      )
      (number 42000)
    )
  )
)
IR:
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"
@format = internal constant [3 x i8] c"%d\00"
define dso_local i32 @main() {
%1 = alloca i32
store i32 34, i32* %1
%2 = load i32, i32* %1
%3 = alloca i32
store i32 35, i32* %3
%4 = load i32, i32* %3
%5 = add i32 %2, %4
%6 = alloca i32
store i32 42000, i32* %6
%7 = load i32, i32* %6
%8 = add i32 %5, %7
%9 = alloca [318 x i8]
%10 = getelementptr inbounds [318 x i8], [318 x i8]* %9, i64 0, i64 0
%11 = getelementptr inbounds [3 x i8], [3 x i8]* @format, i64 0, i64 0
%12 = call i32 (i8*, i8*, ...) @sprintf(i8* %10, i8* %11, i32 %8)
%13 = call i32 @puts(i8* %10)
  ret i32 0
}
declare dso_local i32 @puts(i8*)
declare dso_local i32 @rand()
declare dso_local i32 @sprintf(i8*, i8*, ...)
Run:
42069
