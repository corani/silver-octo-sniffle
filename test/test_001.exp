Tokens:
test/test_001.in:1:1:	print	"print"	0	(1, 1) -> (1, 6)
test/test_001.in:1:6:	lparen	"("	0	(1, 6) -> (1, 7)
test/test_001.in:1:7:	number	"42"	42	(1, 7) -> (1, 9)
test/test_001.in:1:9:	rparen	")"	0	(1, 9) -> (1, 10)
test/test_001.in:2:0:	eof	""	0	(2, 0) -> (2, 0)
AST:
(module
  (print
    (number 42)
  )
)
IR:
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"
@format = internal constant [3 x i8] c"%d\00"
define dso_local i32 @main() {
%1 = alloca i32
store i32 42, i32* %1
%2 = load i32, i32* %1
%3 = alloca [318 x i8]
%4 = getelementptr inbounds [318 x i8], [318 x i8]* %3, i64 0, i64 0
%5 = getelementptr inbounds [3 x i8], [3 x i8]* @format, i64 0, i64 0
%6 = call i32 (i8*, i8*, ...) @sprintf(i8* %4, i8* %5, i32 %2)
%7 = call i32 @puts(i8* %4)
  ret i32 0
}
declare dso_local i32 @puts(i8*)
declare dso_local i32 @rand()
declare dso_local i32 @sprintf(i8*, i8*, ...)
Run:
42
